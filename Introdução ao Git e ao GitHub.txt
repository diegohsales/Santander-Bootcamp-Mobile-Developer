- Comandos básicos para um bom desempenho no Terminal
    No sistema operacional Windows e Unix alguns comandos são parecidos e outros são diferentes.
    Ex:
        Windows             Unix
        - cd                - cd
        - dir               - ls
        - mkdir             - mkdir
        - del / rmdir       - rm -rf

    dir / ls = Mostra a lista de diretorios dentro do seu sistema operacional.
    cd = vamos para uma pasta especifica.
    cls / clear = limpa o terminal
    mkdir = cria uma pasta dentro do terminal
    del = deleta arquivos
    rmdir / rm -rf = deleta a pasta e todo seu conteudo criado

    
- Criando um novo repositório

    crie uma nova pasta, abra-a e execute o comando
        git init
    para criar um novo repositório.
    obtenha um repositório

    crie uma cópia de trabalho em um repositório local executando o comando
        git clone /caminho/para/o/repositório
    quando usar um servidor remoto, seu comando será
        git clone usuário@servidor:/caminho/para/o/repositório
    fluxo de trabalho

    seus repositórios locais consistem em três "árvores" mantidas pelo git. a primeira delas é sua Working Directory que contém os arquivos vigentes. a segunda Index que 
    funciona como uma área temporária e finalmente a HEAD que aponta para o último commit (confirmação) que você fez.
    adicionar & confirmar

    Você pode propor mudanças (adicioná-las ao Index) usando
        git add <arquivo>
        git add *
    Este é o primeiro passo no fluxo de trabalho básico do git. Para realmente confirmar estas mudanças (isto é, fazer um commit), use
        git commit -m "comentários das alterações"
    Agora o arquivo é enviado para o HEAD, mas ainda não para o repositório remoto.
    enviando alterações

    Suas alterações agora estão no HEAD da sua cópia de trabalho local. Para enviar estas alterações ao seu repositório remoto, execute
        git push origin master
    Altere master para qualquer ramo (branch) desejado, enviando suas alterações para ele.

    Se você não clonou um repositório existente e quer conectar seu repositório a um servidor remoto, você deve adicioná-lo com
        git remote add origin <servidor>
    Agora você é capaz de enviar suas alterações para o servidor remoto selecionado.
    ramificando

    Branches ("ramos") são utilizados para desenvolver funcionalidades isoladas umas das outras. O branch master é o branch "padrão" quando você cria um repositório. 
    Use outros branches para desenvolver e mescle-os (merge) ao branch master após a conclusão.

    crie um novo branch chamado "funcionalidade_x" e selecione-o usando
        git checkout -b funcionalidade_x
    retorne para o master usando
        git checkout master
    e remova o branch da seguinte forma
        git branch -d funcionalidade_x
    um branch não está disponível a outros a menos que você envie o branch para seu repositório remoto
        git push origin <funcionalidade_x>
    atualizar & mesclar

    para atualizar seu repositório local com a mais nova versão, execute
        git pull
    na sua pasta de trabalho para obter e fazer merge (mesclar) alterações remotas.
    para fazer merge de um outro branch ao seu branch ativo (ex. master), use
        git merge <branch>
    em ambos os casos o git tenta fazer o merge das alterações automaticamente. Infelizmente, isto nem sempre é possível e resulta em conflitos. Você é responsável por 
    fazer o merge estes conflitos manualmente editando os arquivos exibidos pelo git. Depois de alterar, você precisa marcá-los como merged com
        git add <arquivo>
    antes de fazer o merge das alterações, você pode também pré-visualizá-as usando
        git diff <branch origem> <branch destino>
    rotulando

    é recomendado criar rótulos para releases de software. Este é um conhecido conceito, que também existe no SVN. Você pode criar um novo rótulo chamado 1.0.0 executando 
    o comando
        git tag 1.0.0 1b2e1d63ff
    o 1b2e1d63ff representa os 10 primeiros caracteres do id de commit que você quer referenciar com seu rótulo. Você pode obter o id de commit com
        git log
    você pode também usar menos caracteres do id de commit, ele somente precisa ser único.
    sobrescrever alterações locais

    No caso de você ter feito algo errado (que seguramente nunca acontece ;) ) você pode sobrescrever as alterações locais usando o commando
        git checkout -- <arquivo>
    isto substitui as alterações na sua árvore de trabalho com o conteúdo mais recente no HEAD. Alterações já adicionadas ao index, bem como novos arquivos serão mantidos.

    Se ao invés disso você deseja remover todas as alterações e commits locais, recupere o histórico mais recente do servidor e aponte para seu branch master local desta 
    forma
        git fetch origin
        git reset --hard origin/master
    dicas úteis

    Interface gráfica padrão
        gitk
    usar saídas do git coloridas
        git config color.ui true
    exibir log em apenas uma linha por commit
        git config format.pretty oneline
    fazer inclusões interativas
        git add -i


- Branch e Merge
        git branch

- Branch Básico

    Um branch no Git é simplesmente um leve ponteiro móvel para um dos commits. O nome do branch padrão no Git é master. Como você inicialmente fez commits, você tem um 
    branch principal (master branch) que aponta para o último commit que você fez. Cada vez que você faz um commit ele avança automaticamente.
    O que acontece se você criar um novo branch? Bem, isso cria um novo ponteiro para que você possa se mover. Vamos dizer que você crie um novo branch chamado testing. 
    Você faz isso com o comando git branch:
        git branch testing

    Isso cria um novo ponteiro para o mesmo commit em que você está no momento.
    Para mudar para um branch existente, você executa o comando git checkout. Vamos mudar para o novo branch testing:
        git checkout testing

    Isto move o HEAD para apontar para o branch testing.
        git checkout

- Mudando de Branch

    Com o git checkout você pode mudar de branch, caso a branch ainda não exista você poderá passar o parâmetro -b para criar.
        git checkout -b {nome_da_branch}
        git merge

- Merge Básico

    Suponha que você decidiu que o trabalho na tarefa #53 está completo e pronto para ser feito o merge no branch master. Para fazer isso, você fará o merge do seu branch 
    iss53, bem como o merge do branch hotfix de antes. Tudo que você tem a fazer é executar o checkout do branch para onde deseja fazer o merge e então rodar o comando git 
    merge:
        git checkout master
        git merge iss53
        git mergetool

- Resolvendo conflitos

    Se você quer usar uma ferramenta gráfica para resolver esses problemas, você pode executar o seguinte comando que abre uma ferramenta visual de merge adequada e 
    percorre os conflitos.
        git mergetool
    Arquivos Temporários

    git mergetool cria * .orig arquivos de backup ao resolver fusões. Estes são seguros para remover uma vez que um arquivo foi fundida e sua git mergetool sessão foi 
    concluída.
        git log

- Histórico de Commits

    Depois que você tiver criado vários commits, ou se clonou um repositório com um histórico de commits existente, você provavelmente vai querer ver o que aconteceu. 
    A ferramente mais básica e poderosa para fazer isso é o comando:
        git log
        git stash

- Fazendo Stash

    Muitas vezes, quando você está trabalhando em uma parte do seu projeto, as coisas estão em um estado confuso e você quer mudar de branch por um tempo para trabalhar 
    em outra coisa. O problema é, você não quer fazer o commit de um trabalho incompleto somente para voltar a ele mais tarde. A resposta para esse problema é o comando 
    git stash.
    Você quer mudar de branch, mas não quer fazer o commit do que você ainda está trabalhando; você irá fazer o stash das modificações. Para fazer um novo stash na sua 
    pilha, execute:
        git stash

    Seu diretório de trabalho estará limpo.
    Neste momento, você pode facilmente mudar de branch e trabalhar em outra coisa; suas alterações estão armazenadas na sua pilha. Para ver as stashes que você guardou, 
    você pode usar
        git stash list

    Você pode aplicar aquele que acabou de fazer o stash com o comando mostrado na saída de ajuda do comando stash original: git stash apply. Se você quer aplicar um dos 
    stashes mais antigos, você pode especificá-lo, assim: git stash apply stash@{2}. Se você não especificar um stash, Git assume que é o stash mais recente e tenta 
    aplicá-lo.
        git tag

- Tagging

    Git tem a habilidade de criar tags em pontos específicos na história do código como pontos importantes. Geralmente as pessoas usam esta funcionalidade para marcar 
    pontos de release (v1.0, e por aí vai). Nesta seção, você aprenderá como listar as tags disponíveis, como criar novas tags, e quais são os tipos diferentes de tags.
    Para listar as tags execute:
        git tag

    Para criar uma tag basta executar o seguinte comando, caso não queira criar a tag anotada, somente retire os parâmetros -a e -m.
        git tag -a v1.4 -m 'my version 1.4'

    Compartilhar e Atualizar Projetos
        git fetch

- Fazendo o Fetch

    Para pegar dados dos seus projetos remotos, você pode executar:
        git fetch origin

    Esse comando vai até o projeto remoto e pega todos os dados que você ainda não tem. Depois de fazer isso, você deve ter referências para todos os branches desse 
    remoto, onde você pode fazer o merge ou inspecionar a qualquer momento.
        git pull

- Atualizando local

    Incorpora as alterações de um repositório remoto no branch atual. Em seu modo padrão, git pull é uma abreviação para git fetch seguido de git merge FETCH_HEAD. 
    Por exemplo, se eu estiver em uma branch chamada develop e quiser atualizar caso haja atualizações remotamente:
        git pull origin develop
        git push

- Empurrando seus commits

    O git push é o comando em que você transfere commits a partir do seu repositório local para um repositório remoto. É a contrapartida do git fetch, que busca 
    importações e comprometem as agências locais, utilizando o git push as exportações comprometem as filiais remotas. Para fazer isso, você executa 
    git push [nome_do_repositório_remoto] [nome_da_sua_branch_local], que vai tentar fazer que o [nome_do_repositório_remoto] receba a sua branch [nome_da_sua_branch_local] 
    contendo todos seus commits com alterações. Por exemplo:
        git push origin develop


